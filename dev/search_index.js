var documenterSearchIndex = {"docs":
[{"location":"pslyap.html#Periodic-Lyapunov-equation-solvers","page":"Periodic Lyapunov equation solvers","title":"Periodic Lyapunov equation solvers","text":"","category":"section"},{"location":"pslyap.html#Periodic-differential-Lyapunov-equation-solvers","page":"Periodic Lyapunov equation solvers","title":"Periodic differential Lyapunov equation solvers","text":"","category":"section"},{"location":"pslyap.html","page":"Periodic Lyapunov equation solvers","title":"Periodic Lyapunov equation solvers","text":"pclyap Solution of periodic Lyapunov differential equations. \nprclyap Solution of reverse-time periodic Lyapunov differential equation equations. \npfclyap  Solution of forward-time periodic Lyapunov differential equation equations.\npgclyap Computation of periodic generators for periodic Lyapunov differential equations.\npgclyap2 Computation of periodic generators for a pair of periodic Lyapunov differential equations.\ntvclyap_eval Evaluation of time value of solution from the computed periodic generator.\npcplyap Solution of positve periodic Lyapunov differential equations. \nprcplyap Solution of positve reverse-time periodic Lyapunov differential equations.\npfcplyap  Solution of positve forward-time periodic Lyapunov differential equations.\npgcplyap Computation of periodic generators for positive periodic Lyapunov differential equations.\ntvcplyap_eval Evaluation of time value of the upper triangular factor of solution from the computed periodic generator.","category":"page"},{"location":"pslyap.html#Periodic-difference-Lyapunov-equation-solvers","page":"Periodic Lyapunov equation solvers","title":"Periodic difference Lyapunov equation solvers","text":"","category":"section"},{"location":"pslyap.html","page":"Periodic Lyapunov equation solvers","title":"Periodic Lyapunov equation solvers","text":"pdlyap Solution of periodic discrete-time Lyapunov equations. \npdlyap2 Solution of a pair of periodic discrete-time Lyapunov equations. \nprdlyap Solution of reverse-time periodic discrete-time Lyapunov equations. \npfdlyap  Solution of forward-time periodic discrete-time Lyapunov equations.\npdplyap Solution of positve periodic discrete-time Lyapunov equations. \nprdplyap Solution of positve reverse-time periodic discrete-time Lyapunov equations. \npfdplyap  Solution of positve forward-time periodic discrete-time Lyapunov equations.","category":"page"},{"location":"pslyap.html#Periodic-differential-Lyapunov-equation-solvers-2","page":"Periodic Lyapunov equation solvers","title":"Periodic differential Lyapunov equation solvers","text":"","category":"section"},{"location":"pslyap.html","page":"Periodic Lyapunov equation solvers","title":"Periodic Lyapunov equation solvers","text":"pclyap\nprclyap\npfclyap\npgclyap\npgclyap2\ntvclyap_eval\npcplyap\nprcplyap\npfcplyap\npgcplyap\ntvcplyap_eval","category":"page"},{"location":"pslyap.html#PeriodicMatrixEquations.pclyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pclyap","text":"pclyap(A, C; K = 10, N = 1, adj = false, solver, reltol, abstol, intpol) -> X\n\nSolve the periodic Lyapunov differential equation\n\n.\nX(t) = A(t)X(t) + X(t)A(t)' + C(t) , if adj = false,\n\nor \n\n .\n-X(t) = A(t)'X(t) + X(t)A(t) + C(t) , if adj = true.\n\nThe periodic matrices A and C must have the same type, the same dimensions and commensurate periods.  Additionally C must be symmetric.  The resulting symmetric periodic solution X has the type PeriodicFunctionMatrix and  X(t) can be used to evaluate the value of X at time t.  X has the period set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly. \n\nThe multiple-shooting method of [1] is employed to convert the (continuous-time) periodic differential Lyapunov equation  into a discrete-time periodic Lyapunov equation satisfied by a multiple point periodic generator of the solution.  The keyword argument K specifies the number of grid points to be used for the discretization of the continuous-time problem (default: K = 10).  If  A and C are of types PeriodicTimeSeriesMatrix or PeriodicSwitchingMatrix, then K specifies the number of grid points  used between two consecutive switching time values (default: K = 1).   The multiple point periodic generator is computed  by solving the appropriate discrete-time periodic Lyapunov  equation using the periodic Schur method of [2].  The obtained periodic generator is finally converted into a periodic function matrix which determines for a given t  the function value X(t) by interpolating the solution of the appropriate differential equations if intpol = true (default)   or by integrating the appropriate ODE from the nearest grid point value if intpol = false. For the interplation-based evaluation the integer keyword argument N can be used to split the integration domain (i.e., one period)  into N subdomains to perform the interpolations separately in each domain. The default value of N is N = 1.  \n\nThe ODE solver to be employed to convert the continuous-time problem into a discrete-time problem can be specified using the keyword argument solver, together with the required relative accuracy reltol (default: reltol = 1.e-4) and  absolute accuracy abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nParallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.      Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.prclyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.prclyap","text":"prclyap(A, C; K = 10, N = 1, solver, reltol, abstol, intpol) -> X\n\nSolve the periodic reverse-time Lyapunov differential equation\n\n .\n-X(t) = A(t)'X(t) + X(t)A(t) + C(t).\n\nThe periodic matrices A and C must have the same type, the same dimensions and commensurate periods,  and additionally C must be symmetric. The resulting symmetric periodic solution X has the period  set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly. \n\nThis function is merely an interface to pclyap (see this function for the description of keyword parameters). \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pfclyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pfclyap","text":"pfclyap(A, C; K = 10, N = 1, solver, reltol, abstol, intpol) -> X\n\nSolve the periodic forward-time Lyapunov differential equation\n\n.\nX(t) = A(t)X(t) + X(t)A(t)' + C(t) .\n\nThe periodic matrices A and C must have the same type, the same dimensions and commensurate periods,  and additionally C must be symmetric. The resulting symmetric periodic solution X has the period  set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly. \n\nThis function is merely an interface to pclyap (see this function for the description of keyword parameters). \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pgclyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pgclyap","text":"pgclyap(A, C[, K = 1]; adj = false, solver, reltol, abstol) -> X\n\nCompute periodic generators for the periodic Lyapunov differential equation\n\n.\nX(t) = A(t)X(t) + X(t)A(t)' + C(t) , if adj = false,\n\nor \n\n .\n-X(t) = A(t)'X(t) + X(t)A(t) + C(t) , if adj = true.\n\nThe periodic matrices A and C must have the same type, the same dimensions and commensurate periods,  and additionally C must be symmetric.  K specifies the number of grid points to be used for the discretization of the continuous-time problem (default: K = 1).  If  A and C are of types PeriodicTimeSeriesMatrix or PeriodicSwitchingMatrix, then K specifies the number of grid points  used between two consecutive switching time values (default: K = 1).  \n\nIf A and C have the types PeriodicFunctionMatrix, HarmonicArray, FourierFunctionMatrix or PeriodicTimeSeriesMatrix,  then the resulting X is a collection of periodic generator matrices determined  as a periodic time-series matrix with N components, where N = 1 if A and C are constant matrices and N = K otherwise.  If A and C have the type PeriodicSwitchingMatrix, then X is a collection of periodic generator matrices  determined as a periodic switching matrix, whose switching times are the unique switching times contained in the union of the switching times of A and C.  If K > 1, a refined grid of K equidistant values is used for each two consecutive  switching times in the union.      \n\nThe period of X is set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly. Any component matrix of X is a valid initial value to be used to generate the   solution over a full period by integrating the appropriate differential equation.  The multiple-shooting method of [1] is employed, first, to convert the continuous-time periodic Lyapunov differential equation  into a discrete-time periodic Lyapunov equation satisfied by  the generator solution in the grid points and then to compute the solution by solving an appropriate discrete-time periodic Lyapunov  equation using the periodic Schur method of [2]. \n\nThe ODE solver to be employed to convert the continuous-time problem into a discrete-time problem can be specified using the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4) and   absolute accuracy abstol (default: abstol = 1.e-7). Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nParallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.      Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pgclyap2","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pgclyap2","text":"pgclyap2(A, C, E, [, K = 1]; solver, reltol, abstol) -> (X,Y)\n\nCompute the solutions of the periodic differential Lyapunov equations\n\n .\n X(t) = A(t)*X(t) + X(t)*A'(t) + C(t)\n\nand \n\n .\n-Y(t) = A(t)'*Y(t) + Y(t)*A(t) + E(t).\n\nThe periodic matrices A, C and E must have the same dimensions, the same type and  commensurate periods. Additionally C and E must be symmetric.   The allowed types are PeriodicFunctionMatrix, PeriodicSymbolicMatrix and HarmonicArray.\n\nK specifies the number of grid points to be used for the discretization of the continuous-time problem (default: K = 1).  If A, C and E have the types PeriodicFunctionMatrix, HarmonicArray, FourierFunctionMatrix or PeriodicSymbolicMatrix,  then the resulting X and Y are collections of periodic generator matrices determined  as periodic time-series matrices with N components, where N = 1 if A, C and E are constant matrices and N = K otherwise.      The period of X and Y is set to the least common commensurate period of A, C and E and the number of subperiods is adjusted accordingly. Any component matrix of X or Y is a valid initial value to be used to generate the   solution over a full period by integrating the appropriate differential equation.  The multiple-shooting method of [1] is employed, first, to convert the continuous-time periodic Lyapunov equations  into discrete-time periodic Lyapunov equations satisfied by  the generator solutions in the grid points and then to compute the solutions by solving appropriate discrete-time periodic Lyapunov  equations using the periodic Schur method of [2]. \n\nThe ODE solver to be employed to convert the continuous-time problems into discrete-time problems can be specified using the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4) and   absolute accuracy abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nParallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.      Int. J. Control, vol, 67, pp, 69-87, 1997.  \n\n\n\n\n\npgclyap2(A, C::AbstractMatrix, E, [, K = 1]; solver, reltol, abstol) -> (X,Y)\n\nCompute the solution of the discrete-time periodic Lyapunov equation\n\nX(i+1) = Φ(i)*X(i)*Φ'(i) + W(i), i = 1, ..., K, X(K+1) := X(1)\n\nand a periodic generator for the periodic Lyapunov differential equations\n\n .\n-Y(t) = A(t)'Y(t) + Y(t)A(t) + E(t).\n\nThe periodic matrices A and E and the constant matrix C must have the same dimensions, and A and E  must have the same type and commensurate periods. Additionally C and E must be symmetric.   Φ(i) denotes the transition matrix on the time interval [Δ*(i-1), Δ*i] corresponding to A,  where Δ = T/K with T the common period of A and E. W(i) = 0 for i = 1, ..., K-1 and W(K) = C.   If A and E have the types PeriodicFunctionMatrix, HarmonicArray, FourierFunctionMatrix or PeriodicSymbolicMatrix,  then the resulting Y is a collection of periodic generator matrices determined  as a periodic time-series matrix with N components, where N = 1 if A and E are constant matrices and N = K otherwise.      The period T of Y is set to the least common commensurate period of A and E and the number of subperiods is adjusted accordingly. Any component matrix of Y is a valid initial value to be used to generate the   solution over a full period by integrating the appropriate differential equation.  The multiple-shooting method of [1] is employed, first, to convert the continuous-time periodic Lyapunov into a discrete-time periodic Lyapunov equation satisfied by  the generator solution in the grid points and then to compute the solution by solving an appropriate discrete-time periodic Lyapunov  equation using the periodic Schur method of [2]. \n\nThe ODE solver to be employed to convert the continuous-time problems into discrete-time problems can be specified using the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4) and   absolute accuracy abstol (default: abstol = 1.e-7). Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nParallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.      Int. J. Control, vol, 67, pp, 69-87, 1997.  \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.tvclyap_eval","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.tvclyap_eval","text":"  tvclyap_eval(t, W, A, C; adj = false, solver, reltol, abstol) -> Xval\n\nCompute the time value Xval := X(t) of the solution of the periodic Lyapunov differential equation\n\n   .\n   X(t) = A(t)X(t) + X(t)A(t)' + C(t) ,  X(t0) = W(t0), t > t0, if adj = false\n\nor \n\n   .\n  -X(t) = A(t)'X(t) + X(t)A(t) + C(t) ,  X(t0) = W(t0), t < t0, if adj = true,\n\nusing the periodic generator W determined with the function pgclyap for the same periodic matrices A and C and the same value of the keyword argument adj.  The initial time t0 is the nearest time grid value to t, from below, if adj = false, or from above, if adj = true. \n\nThe above ODE is solved by employing the integration method specified via the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4) and  absolute accuracy abstol (default: abstol = 1.e-7). Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pcplyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pcplyap","text":"pcplyap(A, C; K = 10, adj = false, solver, reltol, abstol) -> U\n\nCompute the upper triangular periodic factor U(t) of the solution X(t) = U(t)U(t)' of the  periodic Lyapunov differential equation\n\n.\nX(t) = A(t)X(t) + X(t)A(t)' + C(t)C(t)' , if adj = false,\n\nor of the solution X(t) = U(t)'U(t) of the periodic Lyapunov differential equation\n\n .\n-X(t) = A(t)'X(t) + X(t)A(t) + C(t)'C(t) , if adj = true.\n\nThe periodic matrices A and C must have the same type, commensurate periods and A must be stable. The resulting upper triangular periodic factor U has the type PeriodicFunctionMatrix and  U(t) can be used to evaluate the value of U at time t.  U has the period set to the least common commensurate period of A and C and  the number of subperiods is adjusted accordingly. \n\nAn extension of the multiple-shooting method of [1] is employed to convert the (continuous-time) periodic differential Lyapunov equation  into a discrete-time periodic Lyapunov equation satisfied by a multiple point generator of the solution.  The keyword argument K specifies the number of grid points to be used for the discretization of the continuous-time problem (default: K = 10).  The upper triangular factor of the multiple point generator is computed  by solving the appropriate discrete-time periodic Lyapunov  equation using the iterative method (Algorithm 5) of [2].  The resulting periodic generator is finally converted into  a periodic function matrix which determines for a given t  the function value U(t) by integrating the appropriate ODE from the nearest grid point value.    \n\nThe ODE solver to be employed to convert the continuous-time problem into a discrete-time problem can be specified using the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4) and   absolute accuracy abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nTo speedup function evaluations, interpolation based function evaluations can be used  by setting the keyword argument intpol = true (default: intpol = true).  Interpolation is not possible if A and C are of type PeriodicSwitchingMatrix. \n\nParallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.      Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.prcplyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.prcplyap","text":"prcplyap(A, C; K = 10, solver, reltol, abstol) -> U\n\nCompute the upper triangular periodic factor U(t) of the solution X(t) = U(t)'U(t)\n\n .\n-X(t) = A(t)'X(t) + X(t)A(t) + C(t)'C(t).\n\nThe periodic matrices A and C must have the same type, the same column dimensions and commensurate periods.  The resulting periodic factor U has the period  set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly. \n\nThis function is merely an interface to pcplyap (see this function for the description of keyword parameters). \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pfcplyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pfcplyap","text":"pfcplyap(A, B; K = 10, solver, reltol, abstol) -> U\n\nCompute the upper triangular periodic factor U(t) of the solution X(t) = U(t)U(t)'\n\n.\nX(t) = A(t)X(t) + X(t)A(t)' + B(t)B(t)' .\n\nThe periodic matrices A and B must have the same type, the same row dimensions and commensurate periods.  The resulting periodic factor U has the period  set to the least common commensurate period of A and B and the number of subperiods is adjusted accordingly. \n\nThis function is merely an interface to pcplyap (see this function for the description of keyword parameters). \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pgcplyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pgcplyap","text":"pgcplyap(A, C[, K = 1]; adj = false, solver, reltol, abstol) -> U\n\nCompute upper triangular periodic generators U(t) of the solution X(t) = U(t)U(t)' of the  periodic Lyapunov differential equation\n\n.\nX(t) = A(t)X(t) + X(t)A(t)' + C(t)C(t)' , if adj = false,\n\nor of the solution X(t) = U(t)'U(t) of the periodic Lyapunov differential equation\n\n .\n-X(t) = A(t)'X(t) + X(t)A(t) + C(t)'C(t) , if adj = true.\n\nThe periodic matrices A and C must have the same type, commensurate periods and A must be stable. The resulting U is a collection of periodic generator matrices determined  as a periodic time-series matrix with N components, where N = 1 if A and C are constant matrices and N = K otherwise.  The period of U is set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly. Any component matrix of U is a valid initial value to be used to generate the   solution over a full period by integrating the appropriate differential equation.  An extension of the multiple-shooting method of [1] is employed, first, to convert the continuous-time periodic Lyapunov  into a discrete-time periodic Lyapunov equation satisfied by  the generator solution in K time grid points and then to compute the solution by solving an appropriate discrete-time periodic Lyapunov  equation using the iterative method (Algorithm 5) of [2]. \n\nThe ODE solver to be employed to convert the continuous-time problem into a discrete-time problem can be specified using the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4) and   absolute accuracy abstol (default: abstol = 1.e-7). Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nFor large values of K, parallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.      Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.tvcplyap_eval","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.tvcplyap_eval","text":" tvcplyap_eval(t, U, A, C; adj = false, solver, reltol, abstol) -> Uval\n\nCompute the time value Uval := U(t) of the upper triangular periodic generators  U(t) of the solution X(t) = U(t)U(t)' of the periodic Lyapunov differential equation\n\n  .\n  X(t) = A(t)X(t) + X(t)A(t)' + C(t)C(t)' , X(t0) = U(t0)U(t0)', t > t0, if adj = false,\n\nor of the solution X(t) = U(t)'U(t) of the periodic Lyapunov differential equation\n\n  .\n -X(t) = A(t)'X(t) + X(t)A(t) + C(t)'C(t) , X(t0) = U(t0)'U(t0), t < t0, if adj = true,\n\nusing the periodic generator U determined with the function pgcplyap for the same periodic matrices A and C and the same value of the keyword argument adj.  The initial time t0 is the nearest time grid value to t, from below, if adj = false, or from above, if adj = true. \n\nThe above ODE is solved by employing the integration method specified via the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4),   absolute accuracy abstol (default: abstol = 1.e-7) and stepsize dt (default: dt = 0, only used if solver = \"symplectic\").  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#Periodic-difference-Lyapunov-equation-solvers-2","page":"Periodic Lyapunov equation solvers","title":"Periodic difference Lyapunov equation solvers","text":"","category":"section"},{"location":"pslyap.html","page":"Periodic Lyapunov equation solvers","title":"Periodic Lyapunov equation solvers","text":"pdlyap\npdlyap2\nprdlyap\npfdlyap\npdplyap\nprdplyap\npfdplyap","category":"page"},{"location":"pslyap.html#PeriodicMatrixEquations.pdlyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pdlyap","text":"pdlyap(A, C; adj = true, stability_check = false) -> X\n\nSolve the periodic discrete-time Lyapunov equation\n\nA'σXA + C = X  for adj = true\n\nor \n\nAXA' + C = σX  for adj = false,\n\nwhere σ is the forward shift operator σX(i) = X(i+1). \n\nThe periodic matrices A and C must have the same type, the same dimensions and commensurate periods,  and additionally C must be symmetric. The resulting symmetric periodic solution X has the period  set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly. \n\nIf stability_check = true, the stability of characteristic multipliers of A is checked and an error is issued if any characteristic multiplier has modulus equal to or larger than one. \n\nThe periodic discrete analog of the Bartels-Stewart method based on the periodic Schur form of the periodic matrix A is employed [1].\n\nReference:\n\n[1] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.                Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pdlyap2","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pdlyap2","text":"pdlyap2(A, C, E; stability_check = false) -> (X, Y)\n\nSolve the pair of periodic discrete-time Lyapunov equations\n\nAXA' + C  = σX, \nA'σYA + E = Y,\n\nwhere σ is the forward shift operator σX(i) = X(i+1) and σY(i) = Y(i+1). \n\nThe periodic matrices A, C and E must have the same type, the same dimensions and commensurate periods,  and additionally C and E must be symmetric. The resulting symmetric periodic solutions X and Y have the period  set to the least common commensurate period of A, C and E and the number of subperiods is adjusted accordingly. \n\nIf stability_check = true, the stability of characteristic multipliers of A is checked and an error is issued if any characteristic multiplier has modulus equal to or larger than one. \n\nThe periodic discrete analog of the Bartels-Stewart method based on the periodic Schur form of the periodic matrix A is employed [1].\n\nReference:\n\n[1] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.                Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.prdlyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.prdlyap","text":"prdlyap(A, C; stability_check = false) -> X\n\nSolve the reverse-time periodic discrete-time Lyapunov equation\n\nA'σXA + C = X\n\nwhere σ is the forward shift operator σX(i) = X(i+1).                 \n\nThe periodic matrices A and C must have the same type, the same dimensions and commensurate periods,  and additionally C must be symmetric. The resulting symmetric periodic solution X has the period  set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly. \n\nIf stability_check = true, the stability of characteristic multipliers of A is checked and an error is issued if any characteristic multiplier has modulus equal to or larger than one. \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pfdlyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pfdlyap","text":"pfdlyap(A, C; stability_check = false) -> X\n\nSolve the forward-time periodic discrete-time Lyapunov equation\n\nAXA' + C = σX\n\nwhere σ is the forward shift operator σX(i) = X(i+1).                 \n\nThe periodic matrices A and C must have the same type, the same dimensions and commensurate periods,  and additionally C must be symmetric. The resulting symmetric periodic solution X has the period  set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly.  \n\nIf stability_check = true, the stability of characteristic multipliers of A is checked and an error is issued if any characteristic multiplier has modulus equal to or larger than one. \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pdplyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pdplyap","text":"pdplyap(A, C; adj = true) -> U\n\nCompute the upper triangular factor U of the solution X = U'U of the  periodic discrete-time Lyapunov matrix equation\n\n  A'σXA + C'C = X, if adj = true,\n\nor of the solution X = UU' of the periodic discrete-time Lyapunov matrix equation\n\n  AXA' + CC' =  σX, if adj = false,\n\nwhere σ is the forward shift operator σX(i) = X(i+1).  The periodic matrix A must be stable, i.e., have all characteristic multipliers  with moduli less than one. \n\nThe periodic matrices A and C must have the same type, the same dimensions and commensurate periods.  The resulting upper triangular periodic matrix U has the period  set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly. \n\nThe iterative method (Algorithm 5) of [1] and its dual version are employed.  \n\nReference:\n\n[1] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.                Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.prdplyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.prdplyap","text":"prdplyap(A, C) -> U\n\nCompute the upper triangular factor U of the solution X = U'*U of the  reverse time periodic discrete-time Lyapunov matrix equation\n\nA'σXA + C'C = X\n\nwhere σ is the forward shift operator σX(i) = X(i+1).  The periodic matrix A must be stable, i.e., have all characteristic multipliers  with moduli less than one. \n\nThe periodic matrices A and C must have the same type, the same dimensions and commensurate periods.  The resulting upper triangular periodic matrix U has the period  set to the least common commensurate period of A and C and the number of subperiods is adjusted accordingly.  \n\nNote: X is the observability Gramian of the periodic pair (A,C).              \n\n\n\n\n\n","category":"function"},{"location":"pslyap.html#PeriodicMatrixEquations.pfdplyap","page":"Periodic Lyapunov equation solvers","title":"PeriodicMatrixEquations.pfdplyap","text":"pfdplyap(A, B) -> U\n\nCompute the upper triangular factor U of the solution X = U*U' of the  forward-time periodic discrete-time Lyapunov equation\n\nAXA' + BB' = σX\n\nwhere σ is the forward shift operator σX(i) = X(i+1).   The periodic matrix A must be stable, i.e., have all characteristic multipliers  with moduli less than one. \n\nThe periodic matrices A and B must have the same type, the same dimensions and commensurate periods.  The resulting upper triangular periodic matrix U has the period  set to the least common commensurate period of A and B and the number of subperiods is adjusted accordingly.  \n\nNote: X is the reachability Gramian of the periodic pair (A,B).              \n\n\n\n\n\n","category":"function"},{"location":"psric.html#Periodic-Riccati-equation-solvers","page":"Periodic Riccati equation solvers","title":"Periodic Riccati equation solvers","text":"","category":"section"},{"location":"psric.html#Periodic-differential-Riccati-equation-solvers","page":"Periodic Riccati equation solvers","title":"Periodic differential Riccati equation solvers","text":"","category":"section"},{"location":"psric.html","page":"Periodic Riccati equation solvers","title":"Periodic Riccati equation solvers","text":"pcric Solution of periodic Riccati differential equations. \npgcric Computation of periodic generators for periodic Riccati differential equations.\ntvcric_eval Evaluation of time value of solution from the computed periodic generator.\nprcric Solution of control-related reverse-time periodic Riccati differential equation. \npfcric  Solution of filtering-related forward-time periodic Riccati differential equation.","category":"page"},{"location":"psric.html#Periodic-difference-Riccati-equation-solvers","page":"Periodic Riccati equation solvers","title":"Periodic difference Riccati equation solvers","text":"","category":"section"},{"location":"psric.html","page":"Periodic Riccati equation solvers","title":"Periodic Riccati equation solvers","text":"prdric Solution of control-related reverse-time periodic Riccati difference equation. \npfdric Solution of filtering-related forward-time periodic Riccati difference equation. ","category":"page"},{"location":"psric.html#Periodic-differential-Riccati-equation-solvers-2","page":"Periodic Riccati equation solvers","title":"Periodic differential Riccati equation solvers","text":"","category":"section"},{"location":"psric.html","page":"Periodic Riccati equation solvers","title":"Periodic Riccati equation solvers","text":"pcric\npgcric\ntvcric_eval\nprcric\npfcric","category":"page"},{"location":"psric.html#PeriodicMatrixEquations.pcric","page":"Periodic Riccati equation solvers","title":"PeriodicMatrixEquations.pcric","text":"pcric(A, R, Q; K = 10, N = 1, adj = false, solver, reltol, abstol, fast, intpol, dt) -> (X, EVALS)\n\nSolve the periodic Riccati differential equation\n\n.                                                 \nX(t) = A(t)X(t) + X(t)A(t)' + Q(t) - X(t)R(t)X(t) ,  if adj = false,\n\nor \n\n .                                                \n-X(t) = A(t)'X(t) + X(t)A(t) + Q(t) - X(t)R(t)X(t) , if adj = true\n\nand compute the stable closed-loop characteristic multipliers in EVALS (see pgcric for details).\n\nThe periodic matrices A, R and Q must have the same type, the same dimensions and commensurate periods,  and additionally R and Q must be symmetric. The resulting symmetric periodic solution X has the type PeriodicFunctionMatrix and  X(t) can be used to evaluate the value of X at time t.  X has the period set to the least common commensurate period of A, R and Q and  the number of subperiods is adjusted accordingly.  Note: Presently the PeriodicTimeSeriesMatrix and PeriodicSwitchingMatrix types are not supported. \n\nIf fast = true (default) the multiple-shooting method is used in conjunction with fast pencil reduction techniques, as proposed in [1], to determine the periodic solution in t = 0 and a multiple point generator of the appropriate periodic differential Riccati equation is determined  (see [2] for details).  If fast = false, the multiple-shooting method is used in  conjunction with the periodic Schur decomposition to determine multiple point generators directly from the stable periodic invariant subspace of  an appropriate symplectic transition matrix (see also [2] for more details). \n\nFor the determination of the multiple point periodic generators an implicit Runge-Kutta Gauss-Legendre 16th order method from the IRKGaussLegendre.jl package is employed to integrate the appropriate Hamiltonian system [2]. \n\nFor the evaluation of solution via interpolation or ODE integration, the  following solvers from the OrdinaryDiffEq.jl package can be selected using the keyword argument solver: \n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nThe accuracy of the computed solutions can be controlled via  the relative accuracy keyword reltol (default: reltol = 1.e-4) and  absolute accuracy keyword abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nFor large values of K, parallel computation can be used to determine  the matrices of the discrete-time problem or the multiple domain interpolation based  solutions. This requires to start Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. On solving periodic Riccati equations.       Numerical Linear Algebra with Applications, 15:809-835, 2008.    \n\n\n\n\n\n","category":"function"},{"location":"psric.html#PeriodicMatrixEquations.pgcric","page":"Periodic Riccati equation solvers","title":"PeriodicMatrixEquations.pgcric","text":"pgcric(A, R, Q[, K = 1]; adj = false, solver, reltol, abstol, fast, PSD_SLICOT) -> (X, EVALS)\n\nCompute periodic generators for the periodic Riccati differential equation in the filtering form\n\n.                                                  \nX(t) = A(t)X(t) + X(t)A(t)' + Q(t) - X(t)R(t)X(t), if adj = false,\n\nor in the control form\n\n .                                              \n-X(t) = A(t)'X(t) + X(t)A(t) + Q(t) - X(t)R(t)X(t) , if adj = true,\n\nwhere A(t), R(t) and Q(t) are periodic matrices of commensurate periods,  with A(t) square, R(t) symmetric and positive definite, and Q(t) symmetric and positive semidefinite.  The resulting X is a collection of periodic generator matrices determined  as a periodic time-series matrix with N components, where N = 1 if A(t), R(t) and Q(t) are constant matrices and N = K otherwise.  EVALS contains the stable characteristic multipliers of the monodromy matrix of  the corresponding Hamiltonian matrix (also called closed-loop characteristic multipliers). The period of X is set to the least common commensurate period of A(t), R(t) and Q(t) and the number of subperiods is adjusted accordingly.  Any component matrix of X is a valid initial value to be used to generate the   solution over a full period by integrating the appropriate differential equation. \n\nIf fast = true (default) the multiple-shooting method is used in conjunction with fast pencil reduction techniques, as proposed in [1], to determine the periodic solution in t = 0 and a multiple point generator of the appropriate periodic differential Riccati equation is determined  (see [2] for details).  If fast = false, the multiple-shooting method is used in  conjunction with the periodic Schur decomposition to determine multiple point generators directly from the stable periodic invariant subspace of  an appropriate symplectic transition matrix (see also [2] for more details). \n\nThe recommended solver to integrate the appropriate Hamiltonian system [2] is the implicit Runge-Kutta Gauss-Legendre 16th order method from the IRKGaussLegendre.jl package, which can be selected with solver = \"symplectic\" (default).\n\nOther ODE solvers from the OrdinaryDiffEq.jl package can be also selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"linear\" - use a special solver for linear ODEs (MagnusGL6()) with fixed time step dt;\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nThe accuracy of the computed solutions can be controlled via  the relative accuracy keyword reltol (default: reltol = 1.e-4) and  absolute accuracy keyword abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nFor large values of K, parallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. On solving periodic Riccati equations.       Numerical Linear Algebra with Applications, 15:809-835, 2008.    \n\n\n\n\n\n","category":"function"},{"location":"psric.html#PeriodicMatrixEquations.tvcric_eval","page":"Periodic Riccati equation solvers","title":"PeriodicMatrixEquations.tvcric_eval","text":"tvcric_eval(t, W, A, R, Q; adj, solver, reltol, abstol, dt) -> Xval\n\nCompute the time value Xval := X(t) of the solution of the periodic Riccati differential equation\n\n  .                                                \n  X(t) = A(t)X(t) + X(t)A(t)' + Q(t) - X(t)R(t)X(t) ,  X(t0) = W(t0), t0 < t, if adj = false (default),\n\nor \n\n  .                                                \n -X(t) = A(t)'X(t) + X(t)A(t) + Q(t) - X(t)R(t)X(t) ,  X(t0) = W(t0), t0 > t, if adj = true,\n\nusing the periodic generator W determined with the function pgcric for the same periodic matrices A, R and Q and the same value of the keyword argument adj.  The initial time t0 is the nearest time grid value to t, from below, if adj = false, or from above, if adj = true.  The resulting Xval is a symmetric matrix. \n\nThe ODE solver to be employed can be specified using the keyword argument solver,  (default: solver = \"non-stiff\") together with the required relative accuracy reltol (default: reltol = 1.e-4) and absolute accuracy abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\n\n\n\n\n","category":"function"},{"location":"psric.html#PeriodicMatrixEquations.prcric","page":"Periodic Riccati equation solvers","title":"PeriodicMatrixEquations.prcric","text":"prcric(A, B, R, Q; K = 10, N = 1, solver, intpol, reltol, abstol, fast) -> (X, EVALS, F)\n\nCompute the symmetric stabilizing solution X(t) of the periodic control related Riccati differential equation\n\n .                                                -1 \n-X(t) = A(t)'X(t) + X(t)A(t) + Q(t) - X(t)B(t)R(t)  B(t)'X(t) ,\n\nthe periodic stabilizing state-feedback gain \n\n           -1\nF(t) = R(t)  B(t)'X(t)\n\nand the corresponding stable characteristic multipliers EVALS of A(t)-B(t)F(t). \n\nThe periodic matrices A, B, R and Q must have the same type and commensurate periods,  and additionally R must be symmetric positive definite and Q must be symmetric positive semidefinite.  The resulting symmetric periodic solution X has the period  set to the least common commensurate period of A, B, R and Q and the number of subperiods is adjusted accordingly. \n\nIf fast = true (default) the multiple-shooting method is used in conjunction with fast pencil reduction techniques, as proposed in [1], to determine the periodic solution in t = 0 and a multiple point generator of the appropriate periodic differential Riccati equation is determined  (see [2] for details).  If fast = false, the multiple-shooting method is used in  conjunction with the periodic Schur decomposition to determine multiple point generators directly from the stable periodic invariant subspace of  an appropriate symplectic transition matrix (see also [2] for more details). \n\nThe keyword argument K specifies the number of grid points to be used for the resulting multiple point periodic generator (default: K = 10).  The obtained periodic generator is finally converted into a periodic function matrix which determines for a given t  the function value X(t) by interpolating the solution of the appropriate differential equations if intpol = true (default)   or by integrating the appropriate ODE from the nearest grid point value if intpol = false. For the interplation-based evaluation the integer keyword argument N can be used to split the integration domain (i.e., one period)  into N subdomains to perform the interpolations separately in each domain. The default value of N is N = 1.  \n\nFor the determination of the multiple point periodic generators an implicit Runge-Kutta Gauss-Legendre 16th order method from the IRKGaussLegendre.jl package is employed to integrate the appropriate Hamiltonian system [2]. \n\nFor the evaluation of solution via interpolation or ODE integration, the  following solvers from the OrdinaryDiffEq.jl package can be selected using the keyword argument solver: \n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nThe accuracy of the computed solutions can be controlled via  the relative accuracy keyword reltol (default: reltol = 1.e-4) and  absolute accuracy keyword abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nFor large values of K, parallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. On solving periodic Riccati equations.       Numerical Linear Algebra with Applications, 15:809-835, 2008.    \n\n\n\n\n\n","category":"function"},{"location":"psric.html#PeriodicMatrixEquations.pfcric","page":"Periodic Riccati equation solvers","title":"PeriodicMatrixEquations.pfcric","text":"pfcric(A, C, R, Q; K = 10, N = 1, solver, intpol, reltol, abstol, fast) -> (X, EVALS, F)\n\nCompute the symmetric stabilizing solution X(t) of the periodic filtering related Riccati differential equation\n\n.                                                 -1 \nX(t) = A(t)X(t) + X(t)A(t)' + Q(t) - X(t)C(t)'R(t)  C(t)X(t) ,\n\nthe periodic stabilizing Kalman gain \n\n                    -1\nF(t) = X(t)C(t)'R(t)\n\nand the corresponding stable characteristic multipliers EVALS of A(t)-F(t)C(t). \n\nThe periodic matrices A, C, R and Q must have the same type and commensurate periods,  and additionally R must be symmetric positive definite and Q must be symmetric positive semidefinite.  The resulting symmetric periodic solution X has the type PeriodicFunctionMatrix and  X(t) can be used to evaluate the value of X at time t.  X has the period set to the least common commensurate period of A, C, R and Q and  the number of subperiods is adjusted accordingly. \n\nIf fast = true (default) the multiple-shooting method is used in conjunction with fast pencil reduction techniques, as proposed in [1], to determine the periodic solution in t = 0 and a multiple point generator of the appropriate periodic differential Riccati equation is determined  (see [2] for details).  If fast = false, the multiple-shooting method is used in  conjunction with the periodic Schur decomposition to determine multiple point generators directly from the stable periodic invariant subspace of  an appropriate symplectic transition matrix (see also [2] for more details). \n\nThe keyword argument K specifies the number of grid points to be used for the resulting multiple point periodic generator (default: K = 10).  The obtained periodic generator is finally converted into a periodic function matrix which determines for a given t  the function value X(t) by interpolating the solution of the appropriate differential equations if intpol = true (default)   or by integrating the appropriate ODE from the nearest grid point value if intpol = false. For the interplation-based evaluation the integer keyword argument N can be used to split the integration domain (i.e., one period)  into N subdomains to perform the interpolations separately in each domain. The default value of N is N = 1.  \n\nFor the determination of the multiple point periodic generators an implicit Runge-Kutta Gauss-Legendre 16th order method from the IRKGaussLegendre.jl package is employed to integrate the appropriate Hamiltonian system [2]. \n\nFor the evaluation of solution via interpolation or ODE integration, the  following solvers from the OrdinaryDiffEq.jl package can be selected using the keyword argument solver: \n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nThe accuracy of the computed solutions can be controlled via  the relative accuracy keyword reltol (default: reltol = 1.e-4) and  absolute accuracy keyword abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nFor large values of K, parallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\nReferences\n\n[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[2] A. Varga. On solving periodic Riccati equations.       Numerical Linear Algebra with Applications, 15:809-835, 2008.    \n\n\n\n\n\n","category":"function"},{"location":"psric.html#Periodic-difference-Riccati-equation-solvers-2","page":"Periodic Riccati equation solvers","title":"Periodic difference Riccati equation solvers","text":"","category":"section"},{"location":"psric.html","page":"Periodic Riccati equation solvers","title":"Periodic Riccati equation solvers","text":"prdric\npfdric","category":"page"},{"location":"psric.html#PeriodicMatrixEquations.prdric","page":"Periodic Riccati equation solvers","title":"PeriodicMatrixEquations.prdric","text":" prdric(A, B, R, Q[, S]; itmax = 0, nodeflate = false, fast, rtol) -> (X, EVALS, F)\n\nSolve the periodic Riccati difference equation\n\n  X(i) = Q(i) + A(i)'X(i+1)A(i) - (A(i)'X(i+1)B(i) + S(i))*\n                                 -1\n         (B(i)'X(i+1)B(i) + R(i))  (A(i)'X(i+1)B(i) + S(i))'\n\nand compute the stabilizing periodic state feedback\n\n                                  -1\n  F(i) = -(B(i)'X(i+1)B(i) + R(i))  (B(i)'X(i+1)A(i) + S(i)')\n\nand the corresponding stable closed-loop characteristic multipliers of A(i)-B(i)F(i) in EVALS. \n\nThe n×n and n×m periodic matrices A(i) and B(i) are contained in the  PeriodicArray objects A and B, and must have the same sampling time.  R(i), Q(i) and S(i) are m×m, n×n and n×m periodic matrices of same sampling times  as  A and B, and such that R(i) and Q(i) are symmetric. R(i), Q(i) and S(i) are contained in the  PeriodicArray objects R, Q and S.  R, Q and S can be alternatively provided as constant real matrices.  The resulting symmetric periodic solution X and periodic state feedback gain F have the period  set to the least common commensurate period of A, B, R and Q and the number of subperiods is adjusted accordingly. \n\nIf fast = true, the fast structure exploiting pencil reduction based method of [1] is used to determine a periodic generator in X(1), which allows to generate iteratively the solution  over the whole period.   If fast = false (default), the periodic Schur decomposition based approach of [1] is employed, applied to a  symplectic pair of periodic matrices. If nodeflate = false (default), the underlying periodic pencil  is preprocessed to eliminate (deflate) the infinite characteristic multipliers originating  from the problem structure. If nodeflate = true, no preliminary deflation is performed.\n\nAn iterative refining of the accuracy of the computed solution  can be performed by using itmax = k, with k > 0 (default: k = 0). \n\nTo detect singularities of involved matrices, the keyword parameter rtol = tol can be used to   specify the lower bound for the 1-norm reciprocal condition number.  The default value of  tol is n*ϵ, where ϵ is the working machine epsilon.\n\nReferences\n\n[1] A. Varga. On solving periodic Riccati equations.       Numerical Linear Algebra with Applications, 15:809-835, 2008.\n\n\n\n\n\n prdric(A, B, R, Q[, S]; itmax = 0, nodeflate = false, fast, rtol) -> (X, EVALS, F)\n\nSolve the periodic Riccati difference equation\n\n  X(i) = Q(i) + A(i)'X(i+1)A(i) - (A(i)'X(i+1)B(i) + S(i))*\n                                 -1\n         (B(i)'X(i+1)B(i) + R(i))  (A(i)'X(i+1)B(i) + S(i))'\n\nand compute the stabilizing periodic state feedback\n\n                                  -1\n  F(i) = -(B(i)'X(i+1)B(i) + R(i))  (B(i)'X(i+1)A(i) + S(i)')\n\nand the corresponding stable closed-loop core characteristic multipliers of A(i)-B(i)F(i) in EVALS. \n\nThe n(i+1)×n(i) and n(i+1)×m periodic matrices A(i) and B(i) are contained in the  PeriodicMatrix objects A and B, and must have the same sampling time.  R(i), Q(i) and S(i) are m×m, n(i)×n(i) and n(i)×m periodic matrices of same sampling times  as  A and B, and such that R(i) and Q(i) are symmetric. R(i), Q(i) and S(i) are contained in the  PeriodicMatrix objects R, Q and S.  R, Q and S can be alternatively provided as constant real matrices.  The resulting n(i)×n(i) symmetric periodic solution X(i) and m×n(i) periodic state feedback gain F(i) have the period  set to the least common commensurate period of A, B, R and Q and the number of subperiods is adjusted accordingly. \n\nIf fast = true, the fast structure exploiting pencil reduction based method of [1] is used to determine a periodic generator in X(j), which allows to generate iteratively the solution  over the whole period. The value of j corresponds to the least dimension nc of n(i)  (which is also the number of core characteristic multipliers).  If fast = false (default), the periodic Schur decomposition based approach of [1] is employed, applied to a  symplectic pair of periodic matrices. If nodeflate = false (default), the underlying periodic pencil  is preprocessed to eliminate (deflate) the infinite characteristic multipliers originating  from the problem structure. If nodeflate = true, no preliminary deflation is performed.\n\nAn iterative refining of the accuracy of the computed solution  can be performed by using itmax = k, with k > 0 (default: k = 0). \n\nTo detect singularities of involved matrices, the keyword parameter rtol = tol can be used to   specify the lower bound for the 1-norm reciprocal condition number.  The default value of  tol is n*ϵ, where ϵ is the working machine epsilon and n is the maximum of n(i).\n\nReferences\n\n[1] A. Varga. On solving periodic Riccati equations.       Numerical Linear Algebra with Applications, 15:809-835, 2008.   \n\n\n\n\n\n","category":"function"},{"location":"psric.html#PeriodicMatrixEquations.pfdric","page":"Periodic Riccati equation solvers","title":"PeriodicMatrixEquations.pfdric","text":" pfdric(A, C, R, Q[, S]; itmax = 0, nodeflate = false, fast, rtol) -> (X, EVALS, F)\n\nSolve the periodic Riccati difference equation\n\n  X(i+1) = Q(i) + A(i)X(i)A(i)' - (A(i)X(i)C(i)' + S(i))*\n                                 -1\n           (C(i)X(i)C(i)' + R(i))  (A(i)X(i)C(i)' + S(i))'\n\nand compute the stabilizing periodic Kalman gain\n\n                                                       -1\n  F(i) = -(C(i)X(i)A(i)' + S(i)')(C(i)X(i)C(i)' + R(i))\n\nand the corresponding stable Kalman filter characteristic multipliers of A(i)-F(i)C(i) in EVALS. \n\nThe n×n and m×n periodic matrices A(i) and C(i) are contained in the  PeriodicArray objects A and C, and must have the same sampling time.  R(i), Q(i) and S(i) are m×m, n×n and m×n periodic matrices of same sampling times  as  A and C, and such that R(i) and Q(i) are symmetric.  R, Q and S can be alternatively provided as constant real matrices.  The resulting symmetric periodic solution X and Kalman filter gain F have the period  set to the least common commensurate period of A, C, R and Q and the number of subperiods is adjusted accordingly. \n\nThe dual method of [1] is employed (see prdric for the description of keyword parameters).\n\nReferences\n\n[1] A. Varga. On solving periodic Riccati equations.       Numerical Linear Algebra with Applications, 15:809-835, 2008.\n\n\n\n\n\n pfdric(A, C, R, Q[, S]; itmax = 0, nodeflate = false, fast, rtol) -> (X, EVALS, F)\n\nSolve the periodic Riccati difference equation\n\n  X(i+1) = Q(i) + A(i)X(i)A(i)' - (A(i)X(i)C(i)' + S(i))*\n                                 -1\n           (C(i)X(i)C(i)' + R(i))  (A(i)X(i)C(i)' + S(i))'\n\nand compute the stabilizing periodic Kalman gain\n\n                                                       -1\n  F(i) = -(C(i)X(i)A(i)' + S(i)')(C(i)X(i)C(i)' + R(i))\n\nand the corresponding stable Kalman filter core characteristic multipliers of A(i)-F(i)C(i) in EVALS. \n\nThe n(i+1)×n(i) and m×n(i) periodic matrices A(i) and C(i) are contained in the  PeriodicMatrix objects A and C, and must have the same sampling time.  R(i), Q(i) and S(i) are m×m, n(i)×n(i) and m×n(i) periodic matrices of same sampling times  as  A and C, and such that R(i) and Q(i) are symmetric.  R, Q and S can be alternatively provided as constant real matrices.  The resulting symmetric periodic solution X and Kalman filter gain F have the period  set to the least common commensurate period of A, C, R and Q and the number of subperiods is adjusted accordingly. \n\nThe dual method of [1] is employed (see prdric for the description of keyword parameters).\n\nReferences\n\n[1] A. Varga. On solving periodic Riccati equations.       Numerical Linear Algebra with Applications, 15:809-835, 2008.   \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#Periodic-solver-utilities","page":"Periodic solver utilities","title":"Periodic solver utilities","text":"","category":"section"},{"location":"pstools.html","page":"Periodic solver utilities","title":"Periodic solver utilities","text":"pslyapd  Solution of periodic discrete-time Lyapunov equations using periodic Schur decomposition. \npslyapd2  Solution of a pair periodic discrete-time Lyapunov equations using a single periodic Schur decomposition. \npslyapdkr  Solution of periodic discrete-time Lyapunov equations using Kronecker product expansions. \npsplyapd Solution of positve periodic discrete-time Lyapunov equations. ","category":"page"},{"location":"pstools.html","page":"Periodic solver utilities","title":"Periodic solver utilities","text":"pslyapd\npslyapd2\npslyapdkr\npsplyapd","category":"page"},{"location":"pstools.html#PeriodicMatrixEquations.pslyapd","page":"Periodic solver utilities","title":"PeriodicMatrixEquations.pslyapd","text":"pslyapd(A, C; adj = true, stability_check = false) -> X\n\nSolve the periodic discrete-time Lyapunov equation.\n\nFor the square n-th order periodic matrices A(i), i = 1, ..., pa and  C(i), i = 1, ..., pc  of periods pa and pc, respectively,  the periodic solution X(i), i = 1, ..., p of period p = lcm(pa,pc) of the  periodic Lyapunov equation is computed:  \n\nA(i)'*X(i+1)*A(i) + C(i) = X(i), i = 1, ..., p     for `adj = true`; \n\nA(i)*X(i)*A(i)' + C(i) = X(i+1), i = 1, ..., p     for `adj = false`.\n\nThe periodic matrices A and C are stored in the n×n×pa and n×n×pc 3-dimensional  arrays A and C, respectively, and X results as a n×n×p 3-dimensional array.  \n\nAlternatively, the periodic matrices A and C can be stored in the  pa- and pc-dimensional vectors of matrices A and C, respectively, and X results as a p-dimensional vector of matrices.\n\nIf stability_check = true, the stability of characteristic multipliers of A is checked and an error is issued if any characteristic multiplier has modulus equal to or larger than one. \n\nThe periodic discrete analog of the Bartels-Stewart method based on the periodic Schur form of the periodic matrix A is employed [1].\n\nReference:\n\n[1] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.                Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicMatrixEquations.pslyapd2","page":"Periodic solver utilities","title":"PeriodicMatrixEquations.pslyapd2","text":"pslyapd2(A, C, E; stability_check = false) -> (X, Y)\n\nSolve a pair of periodic discrete-time Lyapunov equations.\n\nFor the square n-th order periodic matrices A(i), i = 1, ..., pa,  C(i), i = 1, ..., pc, and E(i), i = 1, ..., pe of periods pa, pc and pe, respectively,  the periodic solutions X(i), i = 1, ..., p and Y(i), i = 1, ..., p  of period p = lcm(pa,pc,pe) of the periodic Lyapunov equations are computed:  \n\nA(i)*X(i)*A(i)' + C(i) = X(i+1), i = 1, ..., p ,  \n \nA(i)'*Y(i+1)*A(i) + E(i) = Y(i), i = 1, ..., p .\n\nThe periodic matrices A, C and E are stored in the n×n×pa, n×n×pc and n×n×pe 3-dimensional  arrays A, C and E, respectively, and X and Y result as n×n×p 3-dimensional arrays.  \n\nAlternatively, the periodic matrices A, C and E can be stored in the  pa-, pc- and pe-dimensional vectors of matrices A, C and E, respectively, and X and Y result as p-dimensional vectors of matrices.\n\nIf stability_check = true, the stability of characteristic multipliers of A is checked and an error is issued if any characteristic multiplier has modulus equal to or larger than one. \n\nThe periodic discrete analog of the Bartels-Stewart method based on the periodic Schur form of the periodic matrix A is employed [1].\n\nReference:\n\n[1] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.                Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicMatrixEquations.pslyapdkr","page":"Periodic solver utilities","title":"PeriodicMatrixEquations.pslyapdkr","text":" pslyapdkr(A, C; adj = true) -> X\n\nSolve the periodic discrete-time Lyapunov matrix equation\n\n  A'σXA + C = X, if adj = true,\n\nor \n\n  A*X*A' + C =  σX, if adj = false,\n\nwhere σ is the forward shift operator σX(i) = X(i+1).   The periodic matrix A must not have characteristic multipliers on the unit circle.                The periodic matrices A and C are either stored as 3-dimensional arrays or as as vectors of matrices. \n\nThe Kronecker product expansion of equations is employed and therefore  this function is not recommended for large order matrices or large periods.\n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicMatrixEquations.psplyapd","page":"Periodic solver utilities","title":"PeriodicMatrixEquations.psplyapd","text":" psplyapd(A, C; adj = true, rtol = ϵ^(3/4)) -> U\n\nCompute the upper triangular factor U of the solution X = U'U of the  periodic discrete-time Lyapunov matrix equation\n\n  A'σXA + C'C = X, if adj = true,\n\nor of the solution X = UU' of the periodic discrete-time Lyapunov matrix equation\n\n  AXA' + CC' =  σX, if adj = false,\n\nwhere σ is the forward shift operator σX(i) = X(i+1).  The periodic matrix A must be stable, i.e., have all characteristic multipliers  with moduli less than one. \n\nThe periodic matrices A and C are either stored as 3-dimensional arrays or as as vectors of matrices. \n\nThe iterative method (Algorithm 5) of [1] and its dual version are employed.  \n\nReference:\n\n[1] A. Varga, \"Periodic Lyapunov equations: some applications and new algorithms\",      Int. J. Control, vol. 67, pp. 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = PeriodicMatrixEquations\nDocTestSetup = quote\n    using PeriodicMatrixEquations\nend","category":"page"},{"location":"index.html#PeriodicMatrixEquations.jl","page":"Home","title":"PeriodicMatrixEquations.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: DocBuild) (Image: Code on Github.)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PeriodicMatrixEquations.jl is a collection of Julia functions for the solution of several categories of periodic differential/difference equations. The implementation of solvers relies on the periodic matrix objects defined within the PeriodicMatrices package.  The available functions cover both continuous-time and discrete-time settings, by solving, respectively, periodic differential and difference Lyapunov and Riccati equations with real periodic matrices. The available solvers rely on efficient structure preserving methods using the periodic Schur decomposition of a product of matrices. The solutions of periodic differential equations are determined as single- or multiple-point periodic generators, which allow the efficient computation of the solutions at arbitrary time values by integrating the appropriate differential equations. Akternatively, interpolation with cubic splines can be used to determine the solution at arbitrary time values.   ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The current version of the package includes the following functions:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Solving periodic Lyapunov equations","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pclyap Solution of periodic Lyapunov differential equations. \nprclyap Solution of reverse-time periodic Lyapunov differential equations. \npfclyap  Solution of forward-time periodic Lyapunov differential equations.\npgclyap Computation of periodic generators for periodic Lyapunov differential equations.\npdlyap Solution of periodic discrete-time Lyapunov equations. \npdlyap2 Solution of a pair of periodic discrete-time Lyapunov equations. \nprdlyap Solution of reverse-time periodic discrete-time Lyapunov equations. \npfdlyap  Solution of forward-time periodic discrete-time Lyapunov equations.\npcplyap Solution of positve periodic Lyapunov differential equations. \nprcplyap Solution of positve reverse-time periodic Lyapunov differential equations.\npfcplyap  Solution of positve forward-time periodic Lyapunov differential equations.\npdplyap Solution of positve periodic discrete-time Lyapunov equations. \nprdplyap Solution of positve reverse-time periodic discrete-time Lyapunov equations. \npfdplyap  Solution of positve forward-time periodic discrete-time Lyapunov equations.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Solving periodic Riccati equations","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pcric Solution of periodic Riccati differential equations. \nprcric Solution of control-related reverse-time periodic Riccati differential equation. \npfcric  Solution of filtering-related forward-time periodic Riccati differential equation.\npgcric Computation of periodic generators for periodic Riccati differential equations.\nprdric Solution of control-related reverse-time periodic Riccati difference equation. \npfdric Solution of filtering-related forward-time periodic Riccati difference equation. ","category":"page"},{"location":"index.html#[Release-Notes](https://github.com/andreasvarga/PeriodicMatrixEquations.jl/blob/master/ReleaseNotes.md)","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Andreas Varga","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"License: MIT (expat)","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"[1] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation. Proc. IEEE CDC/ECC, Seville, 2005.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[2] A. Varga. Periodic Lyapunov equations: some applications and new algorithms. Int. J. Control, vol, 67, pp, 69-87, 1997. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[3] A. Varga. On solving periodic Riccati equations. Numerical Linear Algebra with Applications, 15:809-835, 2008. ","category":"page"},{"location":"makeindex.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"makeindex.html","page":"Index","title":"Index","text":"Pages = [ \"pslyap.md\", \"psric.md\", \"pstools.md\" ]\nModules = [PeriodicMatrixEquations]\nOrder = [:type, :function]","category":"page"}]
}
